========================================================================= 
Log Path: output/output.log 
Working Directory: /Users/jamesqi/Documents/graduate/research/github/wtr-reciprocity/expt3/data 
User Name: jamesqi 
R Version: 4.3.1 (2023-06-16) 
Machine: james-m1.local arm64 
Operating System: Darwin 23.1.0 Darwin Kernel Version 23.1.0: Mon Oct 9 21:28:12 PDT 2023; root:xnu-10002.41.9~6/RELEASE_ARM64_T8103 
Base Packages: stats graphics grDevices utils datasets methods base Other Packages: bayestestR_0.13.1 brms_2.19.0 Rcpp_1.0.11 logr_1.3.4 jsonlite_1.8.7 lubridate_1.9.2 forcats_1.0.0 stringr_1.5.0 dplyr_1.1.2 purrr_1.0.2 readr_2.1.4 tidyr_1.3.0 tibble_3.2.1 ggplot2_3.4.2 tidyverse_2.0.0 
Log Start Time: 2023-11-03 15:58:59.340431 
========================================================================= 

 
Traceback: 
 [1] "24: .External(list(name = \"CppMethod__invoke_notvoid\", address = <pointer: 0x1226cbab0>, "                                         
 [2] "        dll = list(name = \"Rcpp\", path = \"/nix/store/va9w81d81nv60g4z6xaw5qjk4idijcfs-r-Rcpp-1.0.11/library/Rcpp/libs/Rcpp.so\", "
 [3] "            dynamicLookup = TRUE, handle = <pointer: 0x8b9b3440>, "                                                                  
 [4] "            info = <pointer: 0x12263bb00>), numParameters = -1L), "                                                                  
 [5] "        <pointer: 0x122242b70>, <pointer: 0x12223d6b0>, .pointer, "                                                                  
 [6] "        ...)"                                                                                                                        
 [7] "23: sampler$call_sampler(args_list[[i]])"                                                                                            
 [8] "22: doTryCatch(return(expr), name, parentenv, handler)"                                                                              
 [9] "21: tryCatchOne(expr, names, parentenv, handlers[[1L]])"                                                                             
[10] "20: tryCatchList(expr, classes, parentenv, handlers)"                                                                                
[11] "19: tryCatch(expr, error = function(e) {"                                                                                            
[12] "        call <- conditionCall(e)"                                                                                                    
[13] "        if (!is.null(call)) {"                                                                                                       
[14] "            if (identical(call[[1L]], quote(doTryCatch))) "                                                                          
[15] "                call <- sys.call(-4L)"                                                                                               
[16] "            dcall <- deparse(call, nlines = 1L)"                                                                                     
[17] "            prefix <- paste(\"Error in\", dcall, \": \")"                                                                            
[18] "            LONG <- 75L"                                                                                                             
[19] "            sm <- strsplit(conditionMessage(e), \"\\n\")[[1L]]"                                                                      
[20] "            w <- 14L + nchar(dcall, type = \"w\") + nchar(sm[1L], type = \"w\")"                                                     
[21] "            if (is.na(w)) "                                                                                                          
[22] "                w <- 14L + nchar(dcall, type = \"b\") + nchar(sm[1L], "                                                              
[23] "                    type = \"b\")"                                                                                                   
[24] "            if (w > LONG) "                                                                                                          
[25] "                prefix <- paste0(prefix, \"\\n  \")"                                                                                 
[26] "        }"                                                                                                                           
[27] "        else prefix <- \"Error : \""                                                                                                 
[28] "        msg <- paste0(prefix, conditionMessage(e), \"\\n\")"                                                                         
[29] "        .Internal(seterrmessage(msg[1L]))"                                                                                           
[30] "        if (!silent && isTRUE(getOption(\"show.error.messages\"))) {"                                                                
[31] "            cat(msg, file = outFile)"                                                                                                
[32] "            .Internal(printDeferredWarnings())"                                                                                      
[33] "        }"                                                                                                                           
[34] "        invisible(structure(msg, class = \"try-error\", condition = e))"                                                             
[35] "    })"                                                                                                                              
[36] "18: try(sampler$call_sampler(args_list[[i]]))"                                                                                       
[37] "17: .local(object, ...)"                                                                                                             
[38] "16: .fun(object = .x1, data = .x2, iter = .x3, seed = .x4, init = .x5, "                                                             
[39] "        pars = .x6, include = .x7, warmup = .x8, thin = .x9, control = .x10, "                                                       
[40] "        show_messages = .x11, chains = .x12, cores = .x13)"                                                                          
[41] "15: .fun(object = .x1, data = .x2, iter = .x3, seed = .x4, init = .x5, "                                                             
[42] "        pars = .x6, include = .x7, warmup = .x8, thin = .x9, control = .x10, "                                                       
[43] "        show_messages = .x11, chains = .x12, cores = .x13)"                                                                          
[44] "14: eval(expr, envir, ...)"                                                                                                          
[45] "13: eval(expr, envir, ...)"                                                                                                          
[46] "12: eval2(call, envir = args, enclos = envir)"                                                                                       
[47] "11: do_call(rstan::sampling, args)"                                                                                                  
[48] "10: .fit_model(model, ...)"                                                                                                          
[49] "9: .fun(model = .x1, sdata = .x2, algorithm = .x3, backend = .x4, "                                                                  
[50] "       iter = .x5, warmup = .x6, thin = .x7, chains = .x8, cores = .x9, "                                                            
[51] "       threads = .x10, opencl = .x11, init = .x12, exclude = .x13, "                                                                 
[52] "       control = .x14, future = .x15, seed = .x16, silent = .x17)"                                                                   
[53] "8: eval(expr, envir, ...)"                                                                                                           
[54] "7: eval(expr, envir, ...)"                                                                                                           
[55] "6: eval2(call, envir = args, enclos = envir)"                                                                                        
[56] "5: do_call(fit_model, fit_args)"                                                                                                     
[57] "4: brm(pttLambda ~ condition * round + (1 + round | id), dat)"                                                                       
[58] "3: pttAnalyses(list_rbind(map(loadAllDatas(), getPttTrials)))"                                                                       
[59] "2: analyses()"                                                                                                                       
[60] "1: main()"                                                                                                                           

========================================================================= 
Log End Time: 2023-11-03 15:59:26.712843 
Log Elapsed Time: 0 00:00:27 
========================================================================= 
